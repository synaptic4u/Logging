#!/usr/bin/php
<?php
namespace Synaptic4U;

use Exception;

// echo "WORKS WORKS WORKS".PHP_EOL;

if (php_sapi_name() !== 'cli') {
    exit;
}

$base_dir = getcwd();

echo getcwd().PHP_EOL;
echo getenv("PWD").PHP_EOL;

if (file_exists($base_dir . '/vendor/autoload.php')) {    

    require_once $base_dir . '/vendor/autoload.php';
}else{

    echo 'EXITING: CANNOT AUTOLOAD!'.PHP_EOL;
    exit;
}


Install::logsConfiguration(base_dir: $base_dir);

class Install{
    
    public static function createLogsDirectory(string $logDir){

        // echo "createLogsDirectory\n";
     
        if (!is_dir($logDir)) {
            mkdir($logDir, 0775, true);
            echo "Logs directory created.\n";
        } else {
            echo "Logs directory already exists.\n";
        }
    }

    public static function logsConfiguration(string $base_dir){
        // Checks for existing configuration or prompts users then creates one.
        // echo "logsConfiguration\n";
        $logDir = $base_dir . "/logs/";

        try {
            // DEFAULT
            if (!is_dir($base_dir . "/logs/")){
                $logDir = $base_dir . "/logs/";
            }
        
            // echo "logs directory: ".$logDir."\n";
            
            self::createLogsDirectory($logDir);
        } catch (Exception $e) {
            echo "Error: ".$e->__tostring();
            exit;
        }
    }
    public static function databaseConfiguration(string $base_dir){
        // Checks for existing configuration or prompts users then creates one.
        // echo "LOG DIR INSTALL SCRIPT RUNNING.\n";

    }

    public static function databaseMigration(string $base_dir){
        // Creates database for Logging.
        // echo "LOG DIR INSTALL SCRIPT RUNNING.\n";

    } 

}
?>